stage('Start Monitoring Stack') {
    steps {
        script {
            // Verify docker-compose file exists
            sh '''
                if [ ! -f docker-compose-monitoring.yml ]; then
                    echo "ERROR: docker-compose-monitoring.yml not found!"
                    exit 1
                fi
            '''
            
            // Start containers with health checks
            sh '''
                docker-compose -f docker-compose-monitoring.yml up -d
                
                # Wait for services to become healthy
                timeout 60s bash -c '
                    while ! docker ps --format "{{.Status}}" | grep -q "(healthy)"; do
                        echo "Waiting for containers to start..."
                        sleep 5
                    done
                ' || echo "Warning: Containers took too long to start"
            '''
        }
    }
}

stage('Configure Monitoring') {
    environment {
        GRAFANA_URL = "http://localhost:3000"
        PROMETHEUS_URL = "http://localhost:9090"
    }
    steps {
        script {
            // 1. Configure Prometheus with credentials
            withCredentials([
                string(credentialsId: 'prometheus-monitor', variable: 'PROMETHEUS_USER'),
                string(credentialsId: '111ce465cbb2cf807f248d7ee8dc9bba08', variable: 'PROMETHEUS_TOKEN')
            ]) {
                sh '''
                    # Create Prometheus config with credentials
                    cat <<EOF > prometheus-jenkins.yml
scrape_configs:
  - job_name: 'jenkins'
    metrics_path: '/prometheus'
    basic_auth:
      username: '${PROMETHEUS_USER}'
      password: '${PROMETHEUS_TOKEN}'
    static_configs:
      - targets: ['jenkins:8080']
EOF
                    
                    # Apply configuration
                    docker cp prometheus-jenkins.yml prometheus:/etc/prometheus/prometheus.yml
                    curl -X POST "${PROMETHEUS_URL}/-/reload"
                    rm -f prometheus-jenkins.yml
                '''
            }

            // 2. Configure Grafana with credentials
            withCredentials([
                usernamePassword(credentialsId: 'grafana-admin', 
                               usernameVariable: 'GRAFANA_USER', 
                               passwordVariable: 'GRAFANA_PASSWORD')
            ]) {
                sh '''
                    # Import Jenkins dashboard
                    curl -X POST \
                    "${GRAFANA_URL}/api/dashboards/import" \
                    -u "${GRAFANA_USER}:${GRAFANA_PASSWORD}" \
                    -H "Content-Type: application/json" \
                    -d '{
                        "dashboard": $(curl -s https://grafana.com/api/dashboards/9964/revisions/1/download),
                        "overwrite": true,
                        "inputs": [{
                            "name": "DS_PROMETHEUS",
                            "type": "datasource",
                            "pluginId": "prometheus",
                            "value": "Prometheus"
                        }]
                    }'
                    
                    # Set Prometheus as default datasource
                    curl -X PUT \
                    "${GRAFANA_URL}/api/org/preferences" \
                    -u "${GRAFANA_USER}:${GRAFANA_PASSWORD}" \
                    -H "Content-Type: application/json" \
                    -d '{
                        "defaultDashboardId": 9964,
                        "theme": "",
                        "homeDashboardId": 9964
                    }'
                '''
            }
        }
    }
}
